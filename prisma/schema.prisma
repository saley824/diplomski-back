// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit {
  KG
  LITER
  PIECE
}

model User {
  id            String          @id @default(uuid())
  name          String
  lastName      String
  email         String          @unique
  username      String          @unique
  password      String
  SavedProducts SavedProducts[]
  Cart          Cart[]
}

model UserAddress {
  id           String @id @default(uuid())
  City         String
  StreetName   String
  StreetNumber String
}

model Product {
  id                  String                @id @default(uuid())
  category            Category              @relation(fields: [categoryId], references: [id])
  categoryId          String
  name                String
  description         String
  price               Float
  createdAt           DateTime              @default(now())
  totalAmount         Int
  quantity            Float?
  unit                Unit
  ProductPriceHistory ProductPriceHistory[]
  productDiscount     ProductDiscount?
  SavedProducts       SavedProducts[]
  Cart                Cart[]
}

model SavedProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  @@id([productId, userId])
}

model ProductDiscount {
  percentage Int
  from       DateTime
  to         DateTime
  product    Product  @relation(fields: [productId], references: [id])
  productId  String   @unique
}

model ProductPriceHistory {
  id         String   @id @default(uuid())
  changeDate DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  newPrice   Float
}

model Category {
  id              String     @id @default(uuid())
  name            String
  SuperCategory   Category?  @relation("SubCategories", fields: [superCategoryId], references: [id])
  superCategoryId String?
  SubCategories   Category[] @relation("SubCategories")
  Product         Product[]
}

// info potrebne za CART

model Cart {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  quantity  Int

  @@id([productId, userId])
}
